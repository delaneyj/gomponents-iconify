package bpmn

import (
	g "github.com/maragudk/gomponents"
)

const IconifyVersion = "0.10.0"

func IconFromName(name string) g.Node {
	switch name {
	case "adHocMarker": return AdHocMarker()
	case "businessRule": return BusinessRule()
	case "businessRuleTask": return BusinessRuleTask()
	case "callActivity": return CallActivity()
	case "compensationMarker": return CompensationMarker()
	case "conditionalFlow": return ConditionalFlow()
	case "connection": return Connection()
	case "connectionMulti": return ConnectionMulti()
	case "dataInput": return DataInput()
	case "dataObject": return DataObject()
	case "dataOutput": return DataOutput()
	case "dataStore": return DataStore()
	case "defaultFlow": return DefaultFlow()
	case "endEvent": return EndEvent()
	case "endEventCancel": return EndEventCancel()
	case "endEventCompensation": return EndEventCompensation()
	case "endEventError": return EndEventError()
	case "endEventEscalation": return EndEventEscalation()
	case "endEventLink": return EndEventLink()
	case "endEventMessage": return EndEventMessage()
	case "endEventMultiple": return EndEventMultiple()
	case "endEventNone": return EndEventNone()
	case "endEventSignal": return EndEventSignal()
	case "endEventTerminate": return EndEventTerminate()
	case "eventSubprocessExpanded": return EventSubprocessExpanded()
	case "gateway": return Gateway()
	case "gatewayComplex": return GatewayComplex()
	case "gatewayEventbased": return GatewayEventbased()
	case "gatewayNone": return GatewayNone()
	case "gatewayOr": return GatewayOr()
	case "gatewayParallel": return GatewayParallel()
	case "gatewayXor": return GatewayXor()
	case "group": return Group()
	case "handTool": return HandTool()
	case "intermediateEvent": return IntermediateEvent()
	case "intermediateEventCatchCancel": return IntermediateEventCatchCancel()
	case "intermediateEventCatchCompensation": return IntermediateEventCatchCompensation()
	case "intermediateEventCatchCondition": return IntermediateEventCatchCondition()
	case "intermediateEventCatchError": return IntermediateEventCatchError()
	case "intermediateEventCatchEscalation": return IntermediateEventCatchEscalation()
	case "intermediateEventCatchLink": return IntermediateEventCatchLink()
	case "intermediateEventCatchMessage": return IntermediateEventCatchMessage()
	case "intermediateEventCatchMultiple": return IntermediateEventCatchMultiple()
	case "intermediateEventCatchNonInterruptingCondition": return IntermediateEventCatchNonInterruptingCondition()
	case "intermediateEventCatchNonInterruptingEscalation": return IntermediateEventCatchNonInterruptingEscalation()
	case "intermediateEventCatchNonInterruptingMessage": return IntermediateEventCatchNonInterruptingMessage()
	case "intermediateEventCatchNonInterruptingMultiple": return IntermediateEventCatchNonInterruptingMultiple()
	case "intermediateEventCatchNonInterruptingParallelMultiple": return IntermediateEventCatchNonInterruptingParallelMultiple()
	case "intermediateEventCatchNonInterruptingSignal": return IntermediateEventCatchNonInterruptingSignal()
	case "intermediateEventCatchNonInterruptingTimer": return IntermediateEventCatchNonInterruptingTimer()
	case "intermediateEventCatchParallelMultiple": return IntermediateEventCatchParallelMultiple()
	case "intermediateEventCatchSignal": return IntermediateEventCatchSignal()
	case "intermediateEventCatchTimer": return IntermediateEventCatchTimer()
	case "intermediateEventNonInterrupting": return IntermediateEventNonInterrupting()
	case "intermediateEventNone": return IntermediateEventNone()
	case "intermediateEventThrowCompensation": return IntermediateEventThrowCompensation()
	case "intermediateEventThrowEscalation": return IntermediateEventThrowEscalation()
	case "intermediateEventThrowLink": return IntermediateEventThrowLink()
	case "intermediateEventThrowMessage": return IntermediateEventThrowMessage()
	case "intermediateEventThrowMultiple": return IntermediateEventThrowMultiple()
	case "intermediateEventThrowSignal": return IntermediateEventThrowSignal()
	case "lane": return Lane()
	case "laneDivideThree": return LaneDivideThree()
	case "laneDivideTwo": return LaneDivideTwo()
	case "laneInsertAbove": return LaneInsertAbove()
	case "laneInsertBelow": return LaneInsertBelow()
	case "lassoTool": return LassoTool()
	case "loopMarker": return LoopMarker()
	case "manual": return Manual()
	case "manualTask": return ManualTask()
	case "parallelMiMarker": return ParallelMiMarker()
	case "participant": return Participant()
	case "receive": return Receive()
	case "receiveTask": return ReceiveTask()
	case "screwWrench": return ScrewWrench()
	case "script": return Script()
	case "scriptTask": return ScriptTask()
	case "send": return Send()
	case "sendTask": return SendTask()
	case "sequentialMiMarker": return SequentialMiMarker()
	case "service": return Service()
	case "serviceTask": return ServiceTask()
	case "spaceTool": return SpaceTool()
	case "startEvent": return StartEvent()
	case "startEventCompensation": return StartEventCompensation()
	case "startEventCondition": return StartEventCondition()
	case "startEventError": return StartEventError()
	case "startEventEscalation": return StartEventEscalation()
	case "startEventMessage": return StartEventMessage()
	case "startEventMultiple": return StartEventMultiple()
	case "startEventNonInterrupting": return StartEventNonInterrupting()
	case "startEventNonInterruptingCondition": return StartEventNonInterruptingCondition()
	case "startEventNonInterruptingEscalation": return StartEventNonInterruptingEscalation()
	case "startEventNonInterruptingMessage": return StartEventNonInterruptingMessage()
	case "startEventNonInterruptingMultiple": return StartEventNonInterruptingMultiple()
	case "startEventNonInterruptingParallelMultiple": return StartEventNonInterruptingParallelMultiple()
	case "startEventNonInterruptingSignal": return StartEventNonInterruptingSignal()
	case "startEventNonInterruptingTimer": return StartEventNonInterruptingTimer()
	case "startEventNone": return StartEventNone()
	case "startEventParallelMultiple": return StartEventParallelMultiple()
	case "startEventSignal": return StartEventSignal()
	case "startEventTimer": return StartEventTimer()
	case "subProcessMarker": return SubProcessMarker()
	case "subprocessCollapsed": return SubprocessCollapsed()
	case "subprocessExpanded": return SubprocessExpanded()
	case "task": return Task()
	case "taskNone": return TaskNone()
	case "textAnnotation": return TextAnnotation()
	case "transaction": return Transaction()
	case "trash": return Trash()
	case "user": return User()
	case "userTask": return UserTask()
	default:
		panic("Unknown icon name: " + name)
	}
}
